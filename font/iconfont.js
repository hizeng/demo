;(function(window) {

  var svgSprite = '<svg>' +
    '' +
    '<symbol id="icon-tianjia" viewBox="0 0 1024 1024">' +
    '' +
    '<path d="M921.322479 537.244964l-818.644959 0c-14.129812 0-25.582655-11.452843-25.582655-25.582655s11.452843-25.582655 25.582655-25.582655l818.644959 0c14.129812 0 25.582655 11.452843 25.582655 25.582655S935.451268 537.244964 921.322479 537.244964z"  ></path>' +
    '' +
    '<path d="M513.023306 946.567443c-14.129812 0-25.582655-11.452843-25.582655-25.582655l0-818.644959c0-14.129812 11.452843-25.582655 25.582655-25.582655s25.582655 11.452843 25.582655 25.582655l0 818.644959C538.605961 935.113577 527.152095 946.567443 513.023306 946.567443z"  ></path>' +
    '' +
    '</symbol>' +
    '' +
    '<symbol id="icon-yonghu" viewBox="0 0 1024 1024">' +
    '' +
    '<path d="M903.916553 911.281799c0 9.860579-2.464121 9.125845-1.521656 29.214369 0 21.902846-26.78197 19.170618-26.78197 0l0-29.214369c0-175.696558-212.604142-290.892183-303.313074-321.334519 92.464925-27.992541 188.264804-144.331199 188.264804-262.918062 0-117.223818-100.695377-233.6996-248.564146-233.6996-147.867746 0-246.703775 114.979708-246.703775 233.703693 0 117.353778 96.231715 233.034451 186.41876 262.912945-88.12406 28.313859-303.328423 147.164734-303.328423 321.334519l0 29.214369c0 19.170618-28.303626 27.383674-28.303626 0l0-29.214369c0-150.803611 133.468804-271.859711 271.332708-321.334519-86.653569-52.501748-152.586211-161.603585-152.586211-262.918062 0-145.199986 123.325793-261.117043 273.175683-261.117043 149.84989 0 275.017634 115.91808 275.017634 261.117043 0 101.313453-67.771523 210.416314-154.425092 262.918062C770.467191 639.422088 903.916553 760.477164 903.916553 911.281799L903.916553 911.281799zM903.916553 911.281799"  ></path>' +
    '' +
    '</symbol>' +
    '' +
    '<symbol id="icon-baidu" viewBox="0 0 1024 1024">' +
    '' +
    '<path d="M184.94659 540.04875c110.533408-23.89721 95.447854-156.84747 92.134671-185.890687-5.357487-44.76321-57.733968-123.010713-128.861652-116.948293C58.834175 245.316493 45.722431 375.37653 45.722431 375.37653 33.668086 435.436774 74.695154 563.875467 184.94659 540.04875zM302.24735 771.196101c-3.242689 9.375602-10.433 33.272811-4.229595 54.068319 12.336318 46.666528 52.658454 48.851819 52.658454 48.851819l57.874954 0 0-142.396355L346.587601 731.719883C318.742769 740.038086 305.278559 761.820499 302.24735 771.196101zM390.011439 317.078616c61.047151 0 110.392422-70.775218 110.392422-158.186842 0-87.34113-49.345271-158.045855-110.392422-158.045855C329.105276 0.916413 279.619018 71.621137 279.619018 158.962267 279.689511 246.373891 329.175769 317.078616 390.011439 317.078616zM652.951243 327.511616c81.560685 10.64448 134.078152-76.978624 144.511152-143.38326 10.64448-66.334144-42.013974-143.38326-99.747942-156.565497C639.8395 14.169142 567.583923 107.502199 561.028052 168.337869 553.132809 242.637749 571.531546 316.93763 652.951243 327.511616zM852.870086 717.973701c0 0-126.253401-98.267583-199.918843-204.571397-99.818435-156.706483-241.79183-92.910097-289.233784-13.182237-47.230474 79.657367-120.895916 130.060037-131.328915 143.38326-10.573986 13.111744-152.476889 90.160861-120.966408 231.006363 31.51048 140.704517 142.114382 138.025773 142.114382 138.025773s81.560685 8.106724 176.092126-13.25273c94.601935-21.147974 176.021633 5.2165 176.021633 5.2165s220.996323 74.51136 281.479527-68.8719C947.401528 792.344073 852.870086 717.973701 852.870086 717.973701zM474.74432 931.356753 331.14958 931.356753c-62.034056-12.477304-86.777184-55.055224-89.878888-62.316029-3.03121-7.40179-20.654521-41.661508-11.349413-99.888928C256.708713 681.810665 333.193884 675.60726 333.193884 675.60726l76.414678 0L409.608562 581.005325l65.135758 0.986905L474.74432 931.356753 474.74432 931.356753zM742.336678 930.369848 577.030018 930.369848c-64.07836-16.636406-67.039076-62.457015-67.039076-62.457015l0-183.987369 67.039076-1.127892 0 165.377153c4.088609 17.693805 25.871021 20.866001 25.871021 20.866001l68.096475 0L670.997514 683.925463l71.409657 0L742.336678 930.369848 742.336678 930.369848zM976.374251 439.102424c0-31.792453-26.293981-127.451787-123.504165-127.451787-97.492158 0-110.462915 90.301847-110.462915 154.168727 0 60.976657 5.146007 145.991511 126.112415 143.242274C989.626982 606.312401 976.374251 471.035863 976.374251 439.102424z"  ></path>' +
    '' +
    '</symbol>' +
    '' +
    '<symbol id="icon-search" viewBox="0 0 1024 1024">' +
    '' +
    '<path d="M949.919 884.621l-0.024-0.024v0.025h0.024c8.024 9.374 12.050 19.749 12.050 31.124 0 12.725-4.524 23.599-13.575 32.648-8.11 8.378-19.459 13.579-32.023 13.579-0.229 0-0.457-0.002-0.684-0.006 0.014 0.001-0.010 0.001-0.036 0.001-5.548 0-10.879-0.924-15.848-2.628-7.197-2.417-13.553-6.799-18.392-12.505l0.135 1.083-248.317-250.091c-59.622 42.199-126.321 63.273-200.043 63.273-7.375 0-14.9-0.325-22.599-0.975-15.172-1.334-29.061-3.825-42.489-7.433-41.797-2.811-96.89-26.383-142.287-61.805-27.515-16.158-65.039-55.982-93.188-105.555-22.908-38.386-38.372-83.766-43.202-132.277 2.546 29.755-2.82-3.848-3.235-38.642 0.267 11.918 0.028 4.525 0.028-2.923 0-20.912 1.886-41.383 5.498-61.253 8.767-54.718 31.071-105.11 63.348-147.494 16.041-30.035 67.258-75.923 128.378-103.927-31.845 13.083 1.154-4.991 37.678-17.716 33.379-12.101 71.904-19.1 112.065-19.1 0.003 0 0.005 0 0.007 0 16.099 0 31.498 1 46.273 3.025 39.523 5.35 77.372 17.399 113.571 36.148 58.544 30.514 105.71 75.888 137.548 131.201-11.552-26.055 12.397 12.769 28.822 57.642 16.424 44.873 23.648 90.398 21.623 136.596-2.675 77.022-29.149 146.32-79.422 207.918l249.292 250.092h-0.976zM728.752 425.612c0.255-4.487 0.4-9.736 0.4-15.019 0-38.020-7.531-74.283-21.184-107.375-16.058-42.425-41.971-79.93-74.924-109.812 25.659 24.638 8.41 6.065-11.339-10.36-36.739-30.815-81.683-53.073-131.070-63.097 31.233 5.299-11.006-4.687-55.578-4.687-11.979 0-23.791 0.722-35.392 2.123-1.99-0.097-5.263 0.301-8.413 1.019l-5.289 0.843c-54.233 8.626-102.039 31.42-140.885 64.438-29.107 18.152-67.52 67.942-87.473 126.293-2.484-8.288-16.059 37.26-18.434 87.484-2.35 50.224 6.85 96.772 27.649 139.62 25.353 55.673 66.522 100.451 117.742 129.604-0.184 6.735 52.369 31.103 110.232 38.453 1.869 3.713 45.093 6.063 88.642-1.313 37.595-6.78 71.13-19.813 101.115-38.094 10.464-2.002 48.407-31.066 78.192-67.117-11.536 19.247 21.32-21.458 42.554-68.53-30.341 54.047-17.768 34.797-7.718 14.048v0.024c19.254-36.996 30.798-80.693 31.415-127.028z" fill="" ></path>' +
    '' +
    '</symbol>' +
    '' +
    '</svg>'
  var script = function() {
    var scripts = document.getElementsByTagName('script')
    return scripts[scripts.length - 1]
  }()
  var shouldInjectCss = script.getAttribute("data-injectcss")

  /**
   * document ready
   */
  var ready = function(fn) {
    if (document.addEventListener) {
      if (~["complete", "loaded", "interactive"].indexOf(document.readyState)) {
        setTimeout(fn, 0)
      } else {
        var loadFn = function() {
          document.removeEventListener("DOMContentLoaded", loadFn, false)
          fn()
        }
        document.addEventListener("DOMContentLoaded", loadFn, false)
      }
    } else if (document.attachEvent) {
      IEContentLoaded(window, fn)
    }

    function IEContentLoaded(w, fn) {
      var d = w.document,
        done = false,
        // only fire once
        init = function() {
          if (!done) {
            done = true
            fn()
          }
        }
        // polling for no errors
      var polling = function() {
        try {
          // throws errors until after ondocumentready
          d.documentElement.doScroll('left')
        } catch (e) {
          setTimeout(polling, 50)
          return
        }
        // no errors, fire

        init()
      };

      polling()
        // trying to always fire before onload
      d.onreadystatechange = function() {
        if (d.readyState == 'complete') {
          d.onreadystatechange = null
          init()
        }
      }
    }
  }

  /**
   * Insert el before target
   *
   * @param {Element} el
   * @param {Element} target
   */

  var before = function(el, target) {
    target.parentNode.insertBefore(el, target)
  }

  /**
   * Prepend el to target
   *
   * @param {Element} el
   * @param {Element} target
   */

  var prepend = function(el, target) {
    if (target.firstChild) {
      before(el, target.firstChild)
    } else {
      target.appendChild(el)
    }
  }

  function appendSvg() {
    var div, svg

    div = document.createElement('div')
    div.innerHTML = svgSprite
    svgSprite = null
    svg = div.getElementsByTagName('svg')[0]
    if (svg) {
      svg.setAttribute('aria-hidden', 'true')
      svg.style.position = 'absolute'
      svg.style.width = 0
      svg.style.height = 0
      svg.style.overflow = 'hidden'
      prepend(svg, document.body)
    }
  }

  if (shouldInjectCss && !window.__iconfont__svg__cssinject__) {
    window.__iconfont__svg__cssinject__ = true
    try {
      document.write("<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}</style>");
    } catch (e) {
      console && console.log(e)
    }
  }

  ready(appendSvg)


})(window)